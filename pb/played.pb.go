// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: played.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GameEntry struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Dur  int32  `protobuf:"varint,2,opt,name=dur,proto3" json:"dur,omitempty"`
}

func (m *GameEntry) Reset()         { *m = GameEntry{} }
func (m *GameEntry) String() string { return proto.CompactTextString(m) }
func (*GameEntry) ProtoMessage()    {}
func (*GameEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_e985a89797b59ec5, []int{0}
}
func (m *GameEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEntry.Merge(m, src)
}
func (m *GameEntry) XXX_Size() int {
	return m.Size()
}
func (m *GameEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEntry.DiscardUnknown(m)
}

var xxx_messageInfo_GameEntry proto.InternalMessageInfo

func (m *GameEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GameEntry) GetDur() int32 {
	if m != nil {
		return m.Dur
	}
	return 0
}

type GameEntryPublic struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Dur  string `protobuf:"bytes,2,opt,name=dur,proto3" json:"dur,omitempty"`
}

func (m *GameEntryPublic) Reset()         { *m = GameEntryPublic{} }
func (m *GameEntryPublic) String() string { return proto.CompactTextString(m) }
func (*GameEntryPublic) ProtoMessage()    {}
func (*GameEntryPublic) Descriptor() ([]byte, []int) {
	return fileDescriptor_e985a89797b59ec5, []int{1}
}
func (m *GameEntryPublic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameEntryPublic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameEntryPublic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameEntryPublic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEntryPublic.Merge(m, src)
}
func (m *GameEntryPublic) XXX_Size() int {
	return m.Size()
}
func (m *GameEntryPublic) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEntryPublic.DiscardUnknown(m)
}

var xxx_messageInfo_GameEntryPublic proto.InternalMessageInfo

func (m *GameEntryPublic) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GameEntryPublic) GetDur() string {
	if m != nil {
		return m.Dur
	}
	return ""
}

type SendPlayedResponse struct {
}

func (m *SendPlayedResponse) Reset()         { *m = SendPlayedResponse{} }
func (m *SendPlayedResponse) String() string { return proto.CompactTextString(m) }
func (*SendPlayedResponse) ProtoMessage()    {}
func (*SendPlayedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e985a89797b59ec5, []int{2}
}
func (m *SendPlayedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendPlayedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendPlayedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendPlayedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendPlayedResponse.Merge(m, src)
}
func (m *SendPlayedResponse) XXX_Size() int {
	return m.Size()
}
func (m *SendPlayedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SendPlayedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SendPlayedResponse proto.InternalMessageInfo

type GetPlayedRequest struct {
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (m *GetPlayedRequest) Reset()         { *m = GetPlayedRequest{} }
func (m *GetPlayedRequest) String() string { return proto.CompactTextString(m) }
func (*GetPlayedRequest) ProtoMessage()    {}
func (*GetPlayedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e985a89797b59ec5, []int{3}
}
func (m *GetPlayedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlayedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlayedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlayedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayedRequest.Merge(m, src)
}
func (m *GetPlayedRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPlayedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayedRequest proto.InternalMessageInfo

func (m *GetPlayedRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type GetPlayedResponse struct {
	Games []*GameEntryPublic `protobuf:"bytes,1,rep,name=games,proto3" json:"games,omitempty"`
	First string             `protobuf:"bytes,2,opt,name=first,proto3" json:"first,omitempty"`
	Last  string             `protobuf:"bytes,3,opt,name=last,proto3" json:"last,omitempty"`
}

func (m *GetPlayedResponse) Reset()         { *m = GetPlayedResponse{} }
func (m *GetPlayedResponse) String() string { return proto.CompactTextString(m) }
func (*GetPlayedResponse) ProtoMessage()    {}
func (*GetPlayedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e985a89797b59ec5, []int{4}
}
func (m *GetPlayedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlayedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlayedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlayedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayedResponse.Merge(m, src)
}
func (m *GetPlayedResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPlayedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayedResponse proto.InternalMessageInfo

func (m *GetPlayedResponse) GetGames() []*GameEntryPublic {
	if m != nil {
		return m.Games
	}
	return nil
}

func (m *GetPlayedResponse) GetFirst() string {
	if m != nil {
		return m.First
	}
	return ""
}

func (m *GetPlayedResponse) GetLast() string {
	if m != nil {
		return m.Last
	}
	return ""
}

type AddUserRequest struct {
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (m *AddUserRequest) Reset()         { *m = AddUserRequest{} }
func (m *AddUserRequest) String() string { return proto.CompactTextString(m) }
func (*AddUserRequest) ProtoMessage()    {}
func (*AddUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e985a89797b59ec5, []int{5}
}
func (m *AddUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddUserRequest.Merge(m, src)
}
func (m *AddUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddUserRequest proto.InternalMessageInfo

func (m *AddUserRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type AddUserResponse struct {
}

func (m *AddUserResponse) Reset()         { *m = AddUserResponse{} }
func (m *AddUserResponse) String() string { return proto.CompactTextString(m) }
func (*AddUserResponse) ProtoMessage()    {}
func (*AddUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e985a89797b59ec5, []int{6}
}
func (m *AddUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddUserResponse.Merge(m, src)
}
func (m *AddUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddUserResponse proto.InternalMessageInfo

type RemoveUserRequest struct {
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (m *RemoveUserRequest) Reset()         { *m = RemoveUserRequest{} }
func (m *RemoveUserRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveUserRequest) ProtoMessage()    {}
func (*RemoveUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e985a89797b59ec5, []int{7}
}
func (m *RemoveUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveUserRequest.Merge(m, src)
}
func (m *RemoveUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveUserRequest proto.InternalMessageInfo

func (m *RemoveUserRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type RemoveUserResponse struct {
}

func (m *RemoveUserResponse) Reset()         { *m = RemoveUserResponse{} }
func (m *RemoveUserResponse) String() string { return proto.CompactTextString(m) }
func (*RemoveUserResponse) ProtoMessage()    {}
func (*RemoveUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e985a89797b59ec5, []int{8}
}
func (m *RemoveUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveUserResponse.Merge(m, src)
}
func (m *RemoveUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *RemoveUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveUserResponse proto.InternalMessageInfo

type CheckWhitelistRequest struct {
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (m *CheckWhitelistRequest) Reset()         { *m = CheckWhitelistRequest{} }
func (m *CheckWhitelistRequest) String() string { return proto.CompactTextString(m) }
func (*CheckWhitelistRequest) ProtoMessage()    {}
func (*CheckWhitelistRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e985a89797b59ec5, []int{9}
}
func (m *CheckWhitelistRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckWhitelistRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckWhitelistRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckWhitelistRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckWhitelistRequest.Merge(m, src)
}
func (m *CheckWhitelistRequest) XXX_Size() int {
	return m.Size()
}
func (m *CheckWhitelistRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckWhitelistRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckWhitelistRequest proto.InternalMessageInfo

func (m *CheckWhitelistRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type CheckWhiteListResponse struct {
	Whitelisted bool `protobuf:"varint,1,opt,name=whitelisted,proto3" json:"whitelisted,omitempty"`
}

func (m *CheckWhiteListResponse) Reset()         { *m = CheckWhiteListResponse{} }
func (m *CheckWhiteListResponse) String() string { return proto.CompactTextString(m) }
func (*CheckWhiteListResponse) ProtoMessage()    {}
func (*CheckWhiteListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e985a89797b59ec5, []int{10}
}
func (m *CheckWhiteListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckWhiteListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckWhiteListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckWhiteListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckWhiteListResponse.Merge(m, src)
}
func (m *CheckWhiteListResponse) XXX_Size() int {
	return m.Size()
}
func (m *CheckWhiteListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckWhiteListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckWhiteListResponse proto.InternalMessageInfo

func (m *CheckWhiteListResponse) GetWhitelisted() bool {
	if m != nil {
		return m.Whitelisted
	}
	return false
}

func init() {
	proto.RegisterType((*GameEntry)(nil), "played.GameEntry")
	proto.RegisterType((*GameEntryPublic)(nil), "played.GameEntryPublic")
	proto.RegisterType((*SendPlayedResponse)(nil), "played.SendPlayedResponse")
	proto.RegisterType((*GetPlayedRequest)(nil), "played.GetPlayedRequest")
	proto.RegisterType((*GetPlayedResponse)(nil), "played.GetPlayedResponse")
	proto.RegisterType((*AddUserRequest)(nil), "played.AddUserRequest")
	proto.RegisterType((*AddUserResponse)(nil), "played.AddUserResponse")
	proto.RegisterType((*RemoveUserRequest)(nil), "played.RemoveUserRequest")
	proto.RegisterType((*RemoveUserResponse)(nil), "played.RemoveUserResponse")
	proto.RegisterType((*CheckWhitelistRequest)(nil), "played.CheckWhitelistRequest")
	proto.RegisterType((*CheckWhiteListResponse)(nil), "played.CheckWhiteListResponse")
}

func init() { proto.RegisterFile("played.proto", fileDescriptor_e985a89797b59ec5) }

var fileDescriptor_e985a89797b59ec5 = []byte{
	// 405 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xcb, 0x6e, 0xda, 0x40,
	0x14, 0x86, 0x6d, 0x28, 0xb4, 0x3e, 0x54, 0x5c, 0x46, 0x14, 0x5c, 0xab, 0xb5, 0x2c, 0xab, 0x6a,
	0x91, 0xaa, 0x22, 0x95, 0x2e, 0x2a, 0x45, 0xd9, 0x84, 0x08, 0xb1, 0xc9, 0x82, 0x38, 0x8a, 0x22,
	0x65, 0x67, 0xf0, 0x49, 0xb0, 0xe2, 0x5b, 0x3c, 0xe3, 0x44, 0xbc, 0x45, 0x1e, 0x22, 0x0f, 0x93,
	0x25, 0xcb, 0x2c, 0x23, 0x78, 0x91, 0xc8, 0x57, 0xcc, 0x45, 0xb0, 0x3b, 0x33, 0xe7, 0xff, 0xff,
	0x73, 0xe6, 0xb3, 0x0c, 0x9f, 0x3d, 0x4b, 0x9f, 0xa1, 0xd1, 0xf5, 0x7c, 0x97, 0xb9, 0xa4, 0x1c,
	0x9f, 0xd4, 0xbf, 0x20, 0x0c, 0x75, 0x1b, 0x07, 0x0e, 0xf3, 0x67, 0x84, 0xc0, 0x07, 0x47, 0xb7,
	0x51, 0xe4, 0x15, 0xbe, 0x23, 0x68, 0x51, 0x4d, 0xea, 0x50, 0x34, 0x02, 0x5f, 0x2c, 0x28, 0x7c,
	0xa7, 0xa4, 0x85, 0xa5, 0xfa, 0x1f, 0x6a, 0x99, 0x65, 0x14, 0x8c, 0x2d, 0x73, 0x72, 0xc8, 0x28,
	0xc4, 0xc6, 0x26, 0x90, 0x0b, 0x74, 0x8c, 0x51, 0x34, 0x59, 0x43, 0xea, 0xb9, 0x0e, 0x45, 0xf5,
	0x27, 0xd4, 0x87, 0xc8, 0xd2, 0xcb, 0xfb, 0x00, 0x29, 0x0b, 0xf3, 0x02, 0x8a, 0x7e, 0x9a, 0x17,
	0xd6, 0xaa, 0x05, 0x8d, 0x9c, 0x2e, 0x36, 0x93, 0x3f, 0x50, 0xba, 0xd5, 0x6d, 0xa4, 0x22, 0xaf,
	0x14, 0x3b, 0x95, 0x5e, 0xbb, 0x9b, 0x3c, 0x72, 0x63, 0x41, 0x2d, 0x56, 0x91, 0x26, 0x94, 0x6e,
	0x4c, 0x9f, 0xb2, 0x64, 0xab, 0xf8, 0x10, 0x4e, 0xb3, 0x74, 0xca, 0xc4, 0x62, 0x3c, 0x2d, 0xac,
	0xd5, 0x1f, 0x50, 0x3d, 0x31, 0x8c, 0x4b, 0x8a, 0xfe, 0xbe, 0x9d, 0x1a, 0x50, 0xcb, 0x54, 0xc9,
	0x73, 0x7e, 0x41, 0x43, 0x43, 0xdb, 0x7d, 0xc0, 0x43, 0xde, 0x26, 0x90, 0xbc, 0x30, 0xb1, 0xff,
	0x86, 0x2f, 0xa7, 0x53, 0x9c, 0xdc, 0x5d, 0x4d, 0x4d, 0x86, 0x96, 0x49, 0xd9, 0xbe, 0x88, 0x23,
	0x68, 0xad, 0xc4, 0x67, 0x91, 0x38, 0xe1, 0xa2, 0x40, 0xe5, 0x31, 0x4d, 0x40, 0x23, 0x32, 0x7d,
	0xd2, 0xf2, 0x57, 0xbd, 0xe7, 0x02, 0x94, 0x63, 0x98, 0xa4, 0x0f, 0x42, 0x46, 0x96, 0x88, 0x19,
	0xc2, 0x8d, 0x8f, 0x22, 0x7d, 0xdd, 0xd1, 0x49, 0xb6, 0xe6, 0xc8, 0x31, 0x7c, 0x4c, 0x48, 0x90,
	0x56, 0xaa, 0x5b, 0x07, 0x28, 0xb5, 0xb7, 0xee, 0x33, 0xf7, 0x00, 0x60, 0xc5, 0x82, 0x64, 0x83,
	0xb6, 0x40, 0x4a, 0xd2, 0xae, 0x56, 0x16, 0x73, 0x0e, 0xd5, 0x75, 0x78, 0xe4, 0x7b, 0xaa, 0xdf,
	0x09, 0x55, 0x92, 0xb7, 0xdb, 0x79, 0x8c, 0x2a, 0xd7, 0xff, 0xf6, 0xb2, 0x90, 0xf9, 0xf9, 0x42,
	0xe6, 0xdf, 0x16, 0x32, 0xff, 0xb4, 0x94, 0xb9, 0xf9, 0x52, 0xe6, 0x5e, 0x97, 0x32, 0x77, 0x5d,
	0xf0, 0xc6, 0xe3, 0x72, 0xf4, 0x33, 0xfd, 0x7b, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xee, 0xe7, 0xbc,
	0x04, 0x5c, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PlayedClient is the client API for Played service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PlayedClient interface {
	GetPlayed(ctx context.Context, in *GetPlayedRequest, opts ...grpc.CallOption) (*GetPlayedResponse, error)
	AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserResponse, error)
	RemoveUser(ctx context.Context, in *RemoveUserRequest, opts ...grpc.CallOption) (*RemoveUserResponse, error)
	CheckWhitelist(ctx context.Context, in *CheckWhitelistRequest, opts ...grpc.CallOption) (*CheckWhiteListResponse, error)
}

type playedClient struct {
	cc *grpc.ClientConn
}

func NewPlayedClient(cc *grpc.ClientConn) PlayedClient {
	return &playedClient{cc}
}

func (c *playedClient) GetPlayed(ctx context.Context, in *GetPlayedRequest, opts ...grpc.CallOption) (*GetPlayedResponse, error) {
	out := new(GetPlayedResponse)
	err := c.cc.Invoke(ctx, "/played.Played/GetPlayed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playedClient) AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserResponse, error) {
	out := new(AddUserResponse)
	err := c.cc.Invoke(ctx, "/played.Played/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playedClient) RemoveUser(ctx context.Context, in *RemoveUserRequest, opts ...grpc.CallOption) (*RemoveUserResponse, error) {
	out := new(RemoveUserResponse)
	err := c.cc.Invoke(ctx, "/played.Played/RemoveUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playedClient) CheckWhitelist(ctx context.Context, in *CheckWhitelistRequest, opts ...grpc.CallOption) (*CheckWhiteListResponse, error) {
	out := new(CheckWhiteListResponse)
	err := c.cc.Invoke(ctx, "/played.Played/CheckWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlayedServer is the server API for Played service.
type PlayedServer interface {
	GetPlayed(context.Context, *GetPlayedRequest) (*GetPlayedResponse, error)
	AddUser(context.Context, *AddUserRequest) (*AddUserResponse, error)
	RemoveUser(context.Context, *RemoveUserRequest) (*RemoveUserResponse, error)
	CheckWhitelist(context.Context, *CheckWhitelistRequest) (*CheckWhiteListResponse, error)
}

// UnimplementedPlayedServer can be embedded to have forward compatible implementations.
type UnimplementedPlayedServer struct {
}

func (*UnimplementedPlayedServer) GetPlayed(ctx context.Context, req *GetPlayedRequest) (*GetPlayedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayed not implemented")
}
func (*UnimplementedPlayedServer) AddUser(ctx context.Context, req *AddUserRequest) (*AddUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (*UnimplementedPlayedServer) RemoveUser(ctx context.Context, req *RemoveUserRequest) (*RemoveUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUser not implemented")
}
func (*UnimplementedPlayedServer) CheckWhitelist(ctx context.Context, req *CheckWhitelistRequest) (*CheckWhiteListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckWhitelist not implemented")
}

func RegisterPlayedServer(s *grpc.Server, srv PlayedServer) {
	s.RegisterService(&_Played_serviceDesc, srv)
}

func _Played_GetPlayed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayedServer).GetPlayed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/played.Played/GetPlayed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayedServer).GetPlayed(ctx, req.(*GetPlayedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Played_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayedServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/played.Played/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayedServer).AddUser(ctx, req.(*AddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Played_RemoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayedServer).RemoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/played.Played/RemoveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayedServer).RemoveUser(ctx, req.(*RemoveUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Played_CheckWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayedServer).CheckWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/played.Played/CheckWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayedServer).CheckWhitelist(ctx, req.(*CheckWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Played_serviceDesc = grpc.ServiceDesc{
	ServiceName: "played.Played",
	HandlerType: (*PlayedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlayed",
			Handler:    _Played_GetPlayed_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _Played_AddUser_Handler,
		},
		{
			MethodName: "RemoveUser",
			Handler:    _Played_RemoveUser_Handler,
		},
		{
			MethodName: "CheckWhitelist",
			Handler:    _Played_CheckWhitelist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "played.proto",
}

func (m *GameEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPlayed(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Dur != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPlayed(dAtA, i, uint64(m.Dur))
	}
	return i, nil
}

func (m *GameEntryPublic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameEntryPublic) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPlayed(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Dur) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPlayed(dAtA, i, uint64(len(m.Dur)))
		i += copy(dAtA[i:], m.Dur)
	}
	return i, nil
}

func (m *SendPlayedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendPlayedResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetPlayedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlayedRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.User) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPlayed(dAtA, i, uint64(len(m.User)))
		i += copy(dAtA[i:], m.User)
	}
	return i, nil
}

func (m *GetPlayedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlayedResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Games) > 0 {
		for _, msg := range m.Games {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPlayed(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.First) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPlayed(dAtA, i, uint64(len(m.First)))
		i += copy(dAtA[i:], m.First)
	}
	if len(m.Last) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPlayed(dAtA, i, uint64(len(m.Last)))
		i += copy(dAtA[i:], m.Last)
	}
	return i, nil
}

func (m *AddUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddUserRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.User) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPlayed(dAtA, i, uint64(len(m.User)))
		i += copy(dAtA[i:], m.User)
	}
	return i, nil
}

func (m *AddUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddUserResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RemoveUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveUserRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.User) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPlayed(dAtA, i, uint64(len(m.User)))
		i += copy(dAtA[i:], m.User)
	}
	return i, nil
}

func (m *RemoveUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveUserResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CheckWhitelistRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckWhitelistRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.User) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPlayed(dAtA, i, uint64(len(m.User)))
		i += copy(dAtA[i:], m.User)
	}
	return i, nil
}

func (m *CheckWhiteListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckWhiteListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Whitelisted {
		dAtA[i] = 0x8
		i++
		if m.Whitelisted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintPlayed(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GameEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPlayed(uint64(l))
	}
	if m.Dur != 0 {
		n += 1 + sovPlayed(uint64(m.Dur))
	}
	return n
}

func (m *GameEntryPublic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPlayed(uint64(l))
	}
	l = len(m.Dur)
	if l > 0 {
		n += 1 + l + sovPlayed(uint64(l))
	}
	return n
}

func (m *SendPlayedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetPlayedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovPlayed(uint64(l))
	}
	return n
}

func (m *GetPlayedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Games) > 0 {
		for _, e := range m.Games {
			l = e.Size()
			n += 1 + l + sovPlayed(uint64(l))
		}
	}
	l = len(m.First)
	if l > 0 {
		n += 1 + l + sovPlayed(uint64(l))
	}
	l = len(m.Last)
	if l > 0 {
		n += 1 + l + sovPlayed(uint64(l))
	}
	return n
}

func (m *AddUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovPlayed(uint64(l))
	}
	return n
}

func (m *AddUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RemoveUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovPlayed(uint64(l))
	}
	return n
}

func (m *RemoveUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CheckWhitelistRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovPlayed(uint64(l))
	}
	return n
}

func (m *CheckWhiteListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Whitelisted {
		n += 2
	}
	return n
}

func sovPlayed(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPlayed(x uint64) (n int) {
	return sovPlayed(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GameEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayed
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayed
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dur", wireType)
			}
			m.Dur = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dur |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayed(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayed
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayed
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameEntryPublic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayed
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameEntryPublic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameEntryPublic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayed
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dur", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayed
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dur = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayed(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayed
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayed
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendPlayedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayed
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendPlayedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendPlayedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPlayed(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayed
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayed
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlayedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayed
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayed
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayed(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayed
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayed
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlayedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayed
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Games", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayed
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Games = append(m.Games, &GameEntryPublic{})
			if err := m.Games[len(m.Games)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field First", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayed
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.First = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Last", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayed
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Last = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayed(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayed
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayed
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayed
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayed
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayed(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayed
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayed
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayed
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPlayed(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayed
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayed
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayed
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayed
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayed(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayed
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayed
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayed
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPlayed(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayed
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayed
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckWhitelistRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayed
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckWhitelistRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckWhitelistRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayed
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayed(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayed
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayed
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckWhiteListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayed
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckWhiteListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckWhiteListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Whitelisted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Whitelisted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPlayed(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayed
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayed
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPlayed(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPlayed
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlayed
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlayed
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPlayed
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthPlayed
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPlayed
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPlayed(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthPlayed
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPlayed = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPlayed   = fmt.Errorf("proto: integer overflow")
)
