// Code generated by protoc-gen-go. DO NOT EDIT.
// source: played.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	played.proto

It has these top-level messages:
	SendPlayedRequest
	GameEntry
	GameEntryPublic
	SendPlayedResponse
	GetPlayedRequest
	GetPlayedResponse
	AddUserRequest
	AddUserResponse
	RemoveUserRequest
	RemoveUserResponse
	CheckWhitelistRequest
	CheckWhiteListResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SendPlayedRequest struct {
	User string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Game string `protobuf:"bytes,2,opt,name=game" json:"game,omitempty"`
}

func (m *SendPlayedRequest) Reset()                    { *m = SendPlayedRequest{} }
func (m *SendPlayedRequest) String() string            { return proto.CompactTextString(m) }
func (*SendPlayedRequest) ProtoMessage()               {}
func (*SendPlayedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SendPlayedRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *SendPlayedRequest) GetGame() string {
	if m != nil {
		return m.Game
	}
	return ""
}

type GameEntry struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Dur  int32  `protobuf:"varint,2,opt,name=dur" json:"dur,omitempty"`
}

func (m *GameEntry) Reset()                    { *m = GameEntry{} }
func (m *GameEntry) String() string            { return proto.CompactTextString(m) }
func (*GameEntry) ProtoMessage()               {}
func (*GameEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GameEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GameEntry) GetDur() int32 {
	if m != nil {
		return m.Dur
	}
	return 0
}

type GameEntryPublic struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Dur  string `protobuf:"bytes,2,opt,name=dur" json:"dur,omitempty"`
}

func (m *GameEntryPublic) Reset()                    { *m = GameEntryPublic{} }
func (m *GameEntryPublic) String() string            { return proto.CompactTextString(m) }
func (*GameEntryPublic) ProtoMessage()               {}
func (*GameEntryPublic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GameEntryPublic) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GameEntryPublic) GetDur() string {
	if m != nil {
		return m.Dur
	}
	return ""
}

type SendPlayedResponse struct {
}

func (m *SendPlayedResponse) Reset()                    { *m = SendPlayedResponse{} }
func (m *SendPlayedResponse) String() string            { return proto.CompactTextString(m) }
func (*SendPlayedResponse) ProtoMessage()               {}
func (*SendPlayedResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type GetPlayedRequest struct {
	User string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *GetPlayedRequest) Reset()                    { *m = GetPlayedRequest{} }
func (m *GetPlayedRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPlayedRequest) ProtoMessage()               {}
func (*GetPlayedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetPlayedRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type GetPlayedResponse struct {
	Games []*GameEntryPublic `protobuf:"bytes,1,rep,name=games" json:"games,omitempty"`
	First string             `protobuf:"bytes,2,opt,name=first" json:"first,omitempty"`
	Last  string             `protobuf:"bytes,3,opt,name=last" json:"last,omitempty"`
}

func (m *GetPlayedResponse) Reset()                    { *m = GetPlayedResponse{} }
func (m *GetPlayedResponse) String() string            { return proto.CompactTextString(m) }
func (*GetPlayedResponse) ProtoMessage()               {}
func (*GetPlayedResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetPlayedResponse) GetGames() []*GameEntryPublic {
	if m != nil {
		return m.Games
	}
	return nil
}

func (m *GetPlayedResponse) GetFirst() string {
	if m != nil {
		return m.First
	}
	return ""
}

func (m *GetPlayedResponse) GetLast() string {
	if m != nil {
		return m.Last
	}
	return ""
}

type AddUserRequest struct {
	User string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *AddUserRequest) Reset()                    { *m = AddUserRequest{} }
func (m *AddUserRequest) String() string            { return proto.CompactTextString(m) }
func (*AddUserRequest) ProtoMessage()               {}
func (*AddUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AddUserRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type AddUserResponse struct {
}

func (m *AddUserResponse) Reset()                    { *m = AddUserResponse{} }
func (m *AddUserResponse) String() string            { return proto.CompactTextString(m) }
func (*AddUserResponse) ProtoMessage()               {}
func (*AddUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type RemoveUserRequest struct {
	User string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *RemoveUserRequest) Reset()                    { *m = RemoveUserRequest{} }
func (m *RemoveUserRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveUserRequest) ProtoMessage()               {}
func (*RemoveUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *RemoveUserRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type RemoveUserResponse struct {
}

func (m *RemoveUserResponse) Reset()                    { *m = RemoveUserResponse{} }
func (m *RemoveUserResponse) String() string            { return proto.CompactTextString(m) }
func (*RemoveUserResponse) ProtoMessage()               {}
func (*RemoveUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type CheckWhitelistRequest struct {
	User string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *CheckWhitelistRequest) Reset()                    { *m = CheckWhitelistRequest{} }
func (m *CheckWhitelistRequest) String() string            { return proto.CompactTextString(m) }
func (*CheckWhitelistRequest) ProtoMessage()               {}
func (*CheckWhitelistRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CheckWhitelistRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type CheckWhiteListResponse struct {
	Whitelisted bool `protobuf:"varint,1,opt,name=whitelisted" json:"whitelisted,omitempty"`
}

func (m *CheckWhiteListResponse) Reset()                    { *m = CheckWhiteListResponse{} }
func (m *CheckWhiteListResponse) String() string            { return proto.CompactTextString(m) }
func (*CheckWhiteListResponse) ProtoMessage()               {}
func (*CheckWhiteListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *CheckWhiteListResponse) GetWhitelisted() bool {
	if m != nil {
		return m.Whitelisted
	}
	return false
}

func init() {
	proto.RegisterType((*SendPlayedRequest)(nil), "played.SendPlayedRequest")
	proto.RegisterType((*GameEntry)(nil), "played.GameEntry")
	proto.RegisterType((*GameEntryPublic)(nil), "played.GameEntryPublic")
	proto.RegisterType((*SendPlayedResponse)(nil), "played.SendPlayedResponse")
	proto.RegisterType((*GetPlayedRequest)(nil), "played.GetPlayedRequest")
	proto.RegisterType((*GetPlayedResponse)(nil), "played.GetPlayedResponse")
	proto.RegisterType((*AddUserRequest)(nil), "played.AddUserRequest")
	proto.RegisterType((*AddUserResponse)(nil), "played.AddUserResponse")
	proto.RegisterType((*RemoveUserRequest)(nil), "played.RemoveUserRequest")
	proto.RegisterType((*RemoveUserResponse)(nil), "played.RemoveUserResponse")
	proto.RegisterType((*CheckWhitelistRequest)(nil), "played.CheckWhitelistRequest")
	proto.RegisterType((*CheckWhiteListResponse)(nil), "played.CheckWhiteListResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Played service

type PlayedClient interface {
	SendPlayed(ctx context.Context, opts ...grpc.CallOption) (Played_SendPlayedClient, error)
	GetPlayed(ctx context.Context, in *GetPlayedRequest, opts ...grpc.CallOption) (*GetPlayedResponse, error)
	AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserResponse, error)
	RemoveUser(ctx context.Context, in *RemoveUserRequest, opts ...grpc.CallOption) (*RemoveUserResponse, error)
	CheckWhitelist(ctx context.Context, in *CheckWhitelistRequest, opts ...grpc.CallOption) (*CheckWhiteListResponse, error)
}

type playedClient struct {
	cc *grpc.ClientConn
}

func NewPlayedClient(cc *grpc.ClientConn) PlayedClient {
	return &playedClient{cc}
}

func (c *playedClient) SendPlayed(ctx context.Context, opts ...grpc.CallOption) (Played_SendPlayedClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Played_serviceDesc.Streams[0], c.cc, "/played.Played/SendPlayed", opts...)
	if err != nil {
		return nil, err
	}
	x := &playedSendPlayedClient{stream}
	return x, nil
}

type Played_SendPlayedClient interface {
	Send(*SendPlayedRequest) error
	CloseAndRecv() (*SendPlayedResponse, error)
	grpc.ClientStream
}

type playedSendPlayedClient struct {
	grpc.ClientStream
}

func (x *playedSendPlayedClient) Send(m *SendPlayedRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *playedSendPlayedClient) CloseAndRecv() (*SendPlayedResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SendPlayedResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *playedClient) GetPlayed(ctx context.Context, in *GetPlayedRequest, opts ...grpc.CallOption) (*GetPlayedResponse, error) {
	out := new(GetPlayedResponse)
	err := grpc.Invoke(ctx, "/played.Played/GetPlayed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playedClient) AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserResponse, error) {
	out := new(AddUserResponse)
	err := grpc.Invoke(ctx, "/played.Played/AddUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playedClient) RemoveUser(ctx context.Context, in *RemoveUserRequest, opts ...grpc.CallOption) (*RemoveUserResponse, error) {
	out := new(RemoveUserResponse)
	err := grpc.Invoke(ctx, "/played.Played/RemoveUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playedClient) CheckWhitelist(ctx context.Context, in *CheckWhitelistRequest, opts ...grpc.CallOption) (*CheckWhiteListResponse, error) {
	out := new(CheckWhiteListResponse)
	err := grpc.Invoke(ctx, "/played.Played/CheckWhitelist", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Played service

type PlayedServer interface {
	SendPlayed(Played_SendPlayedServer) error
	GetPlayed(context.Context, *GetPlayedRequest) (*GetPlayedResponse, error)
	AddUser(context.Context, *AddUserRequest) (*AddUserResponse, error)
	RemoveUser(context.Context, *RemoveUserRequest) (*RemoveUserResponse, error)
	CheckWhitelist(context.Context, *CheckWhitelistRequest) (*CheckWhiteListResponse, error)
}

func RegisterPlayedServer(s *grpc.Server, srv PlayedServer) {
	s.RegisterService(&_Played_serviceDesc, srv)
}

func _Played_SendPlayed_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PlayedServer).SendPlayed(&playedSendPlayedServer{stream})
}

type Played_SendPlayedServer interface {
	SendAndClose(*SendPlayedResponse) error
	Recv() (*SendPlayedRequest, error)
	grpc.ServerStream
}

type playedSendPlayedServer struct {
	grpc.ServerStream
}

func (x *playedSendPlayedServer) SendAndClose(m *SendPlayedResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *playedSendPlayedServer) Recv() (*SendPlayedRequest, error) {
	m := new(SendPlayedRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Played_GetPlayed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayedServer).GetPlayed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/played.Played/GetPlayed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayedServer).GetPlayed(ctx, req.(*GetPlayedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Played_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayedServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/played.Played/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayedServer).AddUser(ctx, req.(*AddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Played_RemoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayedServer).RemoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/played.Played/RemoveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayedServer).RemoveUser(ctx, req.(*RemoveUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Played_CheckWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayedServer).CheckWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/played.Played/CheckWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayedServer).CheckWhitelist(ctx, req.(*CheckWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Played_serviceDesc = grpc.ServiceDesc{
	ServiceName: "played.Played",
	HandlerType: (*PlayedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlayed",
			Handler:    _Played_GetPlayed_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _Played_AddUser_Handler,
		},
		{
			MethodName: "RemoveUser",
			Handler:    _Played_RemoveUser_Handler,
		},
		{
			MethodName: "CheckWhitelist",
			Handler:    _Played_CheckWhitelist_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendPlayed",
			Handler:       _Played_SendPlayed_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "played.proto",
}

func init() { proto.RegisterFile("played.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 403 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0x5d, 0x8b, 0xda, 0x40,
	0x14, 0x35, 0x7e, 0xb5, 0xb9, 0x16, 0x35, 0x17, 0xab, 0x31, 0xd0, 0x22, 0xa1, 0xb4, 0x42, 0xa9,
	0x50, 0xfb, 0x50, 0x68, 0xfb, 0x52, 0x8b, 0xf8, 0xd2, 0x07, 0x9b, 0xb2, 0x2c, 0xec, 0x5b, 0x34,
	0xb3, 0x6b, 0xd8, 0x98, 0x64, 0x33, 0x93, 0x5d, 0xfc, 0xd1, 0xfb, 0x1f, 0x96, 0xc9, 0x4c, 0x3e,
	0x34, 0x41, 0xdf, 0xee, 0xdc, 0x39, 0xe7, 0xce, 0xb9, 0xe7, 0x24, 0xf0, 0x26, 0xf4, 0xec, 0x03,
	0x71, 0x66, 0x61, 0x14, 0xb0, 0x00, 0xdb, 0xe2, 0x64, 0xfe, 0x04, 0xed, 0x3f, 0xf1, 0x9d, 0x75,
	0x72, 0xb2, 0xc8, 0x43, 0x4c, 0x28, 0x43, 0x84, 0x66, 0x4c, 0x49, 0xa4, 0x2b, 0x13, 0x65, 0xaa,
	0x5a, 0x49, 0xcd, 0x7b, 0x77, 0xf6, 0x9e, 0xe8, 0x75, 0xd1, 0xe3, 0xb5, 0xf9, 0x15, 0xd4, 0x95,
	0xbd, 0x27, 0x4b, 0x9f, 0x45, 0x07, 0x0e, 0xf0, 0x39, 0x40, 0x92, 0x78, 0x8d, 0x7d, 0x68, 0x38,
	0x71, 0x94, 0x70, 0x5a, 0x16, 0x2f, 0xcd, 0xef, 0xd0, 0xcb, 0x28, 0xeb, 0x78, 0xe3, 0xb9, 0xdb,
	0x4b, 0x44, 0x55, 0x10, 0x07, 0x80, 0x45, 0xa1, 0x34, 0x0c, 0x7c, 0x4a, 0xcc, 0x8f, 0xd0, 0x5f,
	0x11, 0x76, 0x51, 0xbd, 0xe9, 0x81, 0x56, 0xc0, 0x09, 0x32, 0x7e, 0x81, 0x16, 0x5f, 0x83, 0xea,
	0xca, 0xa4, 0x31, 0xed, 0xcc, 0x47, 0x33, 0xe9, 0xd0, 0x89, 0x40, 0x4b, 0xa0, 0x70, 0x00, 0xad,
	0x5b, 0x37, 0xa2, 0x4c, 0xaa, 0x12, 0x07, 0xfe, 0x9a, 0x67, 0x53, 0xa6, 0x37, 0xc4, 0x6b, 0xbc,
	0x36, 0x3f, 0x40, 0xf7, 0xb7, 0xe3, 0x5c, 0x51, 0x12, 0x9d, 0xd3, 0xa4, 0x41, 0x2f, 0x43, 0xc9,
	0x75, 0x3e, 0x81, 0x66, 0x91, 0x7d, 0xf0, 0x48, 0x2e, 0x71, 0x07, 0x80, 0x45, 0xa0, 0xa4, 0x7f,
	0x86, 0xb7, 0x7f, 0x76, 0x64, 0x7b, 0x7f, 0xbd, 0x73, 0x19, 0xf1, 0x5c, 0xca, 0xce, 0x8d, 0xf8,
	0x01, 0xc3, 0x1c, 0xfc, 0x37, 0x01, 0x4b, 0x5f, 0x26, 0xd0, 0x79, 0x4a, 0x27, 0x10, 0x27, 0x21,
	0xbd, 0xb6, 0x8a, 0xad, 0xf9, 0x73, 0x1d, 0xda, 0xc2, 0x4c, 0x5c, 0x01, 0xe4, 0xb9, 0xe0, 0x38,
	0xf5, 0xb0, 0xf4, 0x51, 0x19, 0x46, 0xd5, 0x95, 0x14, 0x5e, 0x9b, 0x2a, 0xb8, 0x00, 0x35, 0x8b,
	0x08, 0xf5, 0x2c, 0x8b, 0x93, 0x74, 0x8d, 0x71, 0xc5, 0x4d, 0x3a, 0x05, 0x7f, 0xc1, 0x2b, 0x69,
	0x29, 0x0e, 0x53, 0xdc, 0x71, 0x12, 0xc6, 0xa8, 0xd4, 0xcf, 0xd8, 0x4b, 0x80, 0xdc, 0xd4, 0x7c,
	0x95, 0x52, 0x22, 0xf9, 0x2a, 0x15, 0x19, 0xd4, 0xf0, 0x1f, 0x74, 0x8f, 0x53, 0xc0, 0x77, 0x29,
	0xbe, 0x32, 0x1d, 0xe3, 0x7d, 0xf9, 0xba, 0x98, 0x87, 0x59, 0x5b, 0x34, 0x6f, 0xea, 0xe1, 0x66,
	0xd3, 0x4e, 0x7e, 0xdd, 0x6f, 0x2f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xcf, 0xa2, 0x65, 0x92, 0xca,
	0x03, 0x00, 0x00,
}
